package softeng206.tatai;

import java.util.HashMap;
import java.util.Random;
import java.util.Map;

/**
 * .The Level Class is used to setup games. This is used
 * to separate Math games from speech practices. Depending
 * on what the user requests, the respective set methods
 * for setting the gameType are used.
 *
 * @author Charlie Rillstone
 * @author Sam Broadhead
 */
public class Level {
    private Question[] questions = new Question[10];
    private static Level singleton = new Level();
    private int finalScore;
    private int gameMode;

    /**
     * constructor for singleton Level field.
     */
    private Level() {}

    /**
     * Gets the final score of the current game
     * generated by the finishQuiz method
     *
     * @return the final score
     */
    public int getFinalScore() {
        return finalScore;
    }

    /**
     * Gets the Game mode.
     *
     * @return the game mode
     */
    public int getGameMode() {
        return gameMode;
    }

    /**
     * Get questions array for displaying to the user.
     *
     * @return {@link Question} question array
     * @see Question
     */
    public Question[] getQuestions() {
        return questions;
    }

    /**
     * get the singleton {@link Level} to ensure the same
     * instance of {@link Level} is used.
     *
     * @return the {@link Level} singleton instance.
     */
    public static Level getInstance() {
        return singleton;
    }

    /**
     * Sets the game time to practice, fills the question
     * array with practice questions (i.e. no equations)
     */
    void setPractice() {
        Question[] questionArr = new Question[10];
        Random rand = new Random();
        for(int i = 0; i < 10; i++) {
            Integer question = rand.nextInt((9 - 1) + 1) + 1;
            questionArr[i] = new Question(question.toString());
        }
        gameMode = 1;
        this.questions = questionArr;
    }

    /**
     * Sets the game time to Math, fills the question
     * array with math questions.
     * @param operationType the math operation type chosen by the user
     */
    void setMathGame(String operationType) {
        Question [] questionArr = new Question[10];
        if(operationType.equals("random")) {
            Random rand = new Random();
            String[] types = new String[] {"addition","subtraction","division","multiplication"};
            for (int i=0; i<10; i++) {
                questionArr[i] = new Question(types[rand.nextInt(3-0+1)+0]);
            }
        }
        else {
            for (int i=0; i<10; i++) {
                questionArr[i] = new Question(operationType);
            }
        }
        gameMode = 2;
        this.questions = questionArr;
    }

    /**
     * Sets the game time to custom game, fills the question
     * array with the custom game the user chose. This is a pre
     * defined array which the user had previously created
     * from the custom game function
     *
     * @see softeng206.tatai.controllers.GameCreatorController
     * @param questions the questions
     */
    void setCustomMathGame(Question[] questions) {
        this.questions = questions;
        gameMode = 3;
    }

    /**
     * Method used to complete the quiz once the user has answered
     * all 10 questions. Called from {@link softeng206.tatai.controllers.LevelController}
     * it calculates the final score and allows this score to be read from the
     * {@link softeng206.tatai.controllers.FinalScoreController} for display.
     *
     * @param scorePerQuestion the scores received per question answered
     */
    public void finishQuiz(HashMap<Integer,Double> scorePerQuestion) {
        Double scoreSum = 0.0;
        for(Map.Entry<Integer, Double> entry : scorePerQuestion.entrySet()) {
            scoreSum += entry.getValue();
        }
        scoreSum = (scoreSum/10) * 100;
        finalScore = (int) Math.round(scoreSum);
    }
}
